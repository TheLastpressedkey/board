import OpenAI from 'openai';
import { AIFunctionService } from '../services/aiFunctions';

// V√©rification de la pr√©sence de la cl√© API (local avec VITE_ ou Vercel sans VITE_)
const apiKey = import.meta.env.VITE_OPENAI_API_KEY || import.meta.env.OPENAI_API_KEY;

if (!apiKey) {
  throw new Error('OpenAI API key is not defined. Please set VITE_OPENAI_API_KEY (local) or OPENAI_API_KEY (Vercel) in environment variables');
}

const openai = new OpenAI({
  apiKey: apiKey,
  dangerouslyAllowBrowser: true
});

export async function getChatCompletion(
  messages: { role: 'user' | 'assistant' | 'system'; content: string }[], 
  useWebSearch: boolean = false
) {
  try {
    console.log('üîç Debug - API Key present:', !!apiKey);
    console.log('üîç Debug - API Key format:', apiKey ? `${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 4)}` : 'No key');
    console.log('üîç Debug - Use web search:', useWebSearch);
    console.log('üîç Debug - Messages count:', messages.length);

    // Validation basique de la cl√© API
    if (!apiKey || !apiKey.startsWith('sk-')) {
      throw new Error('Format de cl√© API OpenAI invalide. La cl√© doit commencer par "sk-"');
    }

    if (useWebSearch) {
      console.log('üåê Using web search with Responses API...');
      
      // Test avec une requ√™te simple d'abord
      const response = await openai.responses.create({
        model: "gpt-4o",
        tools: [{ type: "web_search_preview" }],
        input: messages[messages.length - 1].content,
        store: true,
      });

      console.log('‚úÖ Web search response received');
      return response.output_text;
    } else {
      console.log('üí¨ Using Chat Completions...');
      
      // Test d'authentification avec une requ√™te simple d'abord
      await openai.chat.completions.create({
        messages: [{ role: 'user', content: 'Hello' }],
        model: "gpt-4o",
        max_tokens: 10,
        store: false, // D√©sactiver le stockage pour les tests
      });

      console.log('‚úÖ Basic authentication successful');
      
      // Si √ßa marche, utiliser la version compl√®te avec les tools
      const tools = AIFunctionService.getFunctionDefinitions();
      
      const completion = await openai.chat.completions.create({
        messages,
        model: "gpt-4o",
        tools,
        store: true,
      });

      console.log('‚úÖ Full chat completion received');
      const message = completion.choices[0].message;
      
      // V√©rifier s'il y a des tool calls
      if (message.tool_calls && message.tool_calls.length > 0) {
        console.log('üîß Processing tool calls:', message.tool_calls.length);
        // Construire la conversation avec les tool calls
        const conversationWithTools: any[] = [
          ...messages,
          {
            role: 'assistant',
            content: message.content,
            tool_calls: message.tool_calls
          }
        ];

        // Traiter les tool calls
        const toolResults = await AIFunctionService.processToolCalls(message.tool_calls);
        conversationWithTools.push(...toolResults);

        // Faire un deuxi√®me appel avec les r√©sultats
        const finalCompletion = await openai.chat.completions.create({
          messages: conversationWithTools,
          model: "gpt-4o",
          tools,
          store: true,
        });

        console.log('‚úÖ Final completion with tools received');
        return finalCompletion.choices[0].message.content;
      }

      return message.content;
    }
  } catch (error: any) {
    console.error('‚ùå Detailed error in getChatCompletion:', {
      error,
      message: error?.message,
      status: error?.status,
      code: error?.code,
      type: error?.type,
      response: error?.response?.data || error?.response
    });
    
    // Gestion sp√©cifique des erreurs OpenAI
    if (error?.code === 'internal_error' || error?.type === 'auth_subrequest_error') {
      throw new Error('Erreur d\'authentification OpenAI. V√©rifiez que votre cl√© API est valide et active.');
    }
    
    if (error?.status === 401 || error?.message?.includes('401') || error?.message?.includes('Unauthorized')) {
      throw new Error('Cl√© API OpenAI invalide ou expir√©e. V√©rifiez votre cl√© dans le fichier .env');
    }
    
    if (error?.status === 429 || error?.message?.includes('429')) {
      throw new Error('Limite de requ√™tes API atteinte. Veuillez r√©essayer plus tard');
    }
    
    if (error?.status === 403 || error?.message?.includes('403')) {
      throw new Error('Acc√®s refus√©. V√©rifiez les permissions de votre cl√© API OpenAI');
    }
    
    if (error?.message?.includes('network') || error?.message?.includes('fetch')) {
      throw new Error('Erreur de connexion. V√©rifiez votre connexion internet');
    }

    if (error?.message?.includes('API key')) {
      throw new Error('Probl√®me avec la cl√© API OpenAI. V√©rifiez qu\'elle est correcte et active');
    }
    
    // Erreur g√©n√©rique mais plus informative
    throw new Error(`Erreur OpenAI: ${error?.message || 'Erreur inconnue'}`);
  }
}